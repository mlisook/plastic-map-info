#!/usr/bin/env node
var server  = require('../lib/server'),
    argv    = require('minimist')(process.argv.slice(2)),
    _       = require('underscore'),
    path    = require('path'),
    fs      = require('fs'),
    config  = argv.c || argv.config; //default config file
/**
 * Check of one of the given arguments is defined
 * @params {..*}
 * @return {Boolean} true if one or more of th arg. is defined
 */
function def () {
    var arg = _.toArray(arguments);
    for (var i = 0, max = arg.length; i < max; i++) {
        if (typeof arg[i] !== 'undefined') {
            return true;
        }
    }
    return false;
}
/**
 * Return first argument that is not undefined
 * @return {*}
 */
function first () {
    var arg = _.toArray(arguments);
    for (var i = 0, max = arg.length; i < max; i++) {
        if (typeof arg[i] !== 'undefined') {
            return arg[i];
        }
    }   
}
// CLI help
if (argv.h || argv.help) {
  console.log([
    'VP Simple Server',    
    'usage: vp-static-server [options]',
    'or for short use vpss [options]',
    '',
    'options:',
    '-r   --root          Document root to use [./]',
    '-a   --host          Address to use [0.0.0.0]',
    '-p   --port          Port to use [0] ( auto select )',
    '-o   --open          Open server URL in your default browser [true]',
    '-s   --https         Create a ssl server ( HTTPS ) [false]',
    '     --https-cert    CERT file for ssl server [ssl/127.0.0.1.cert]',
    '     --https-key     KEY file for ssl server [ssl/127.0.0.1.key]',
    '     --static-*      Express.static options:',
    '                     --static-dotfiles       [ignore]',
    '                     --static-etag           [true]',
    '                     --static-index          [index.html]',
    '                     --static-lastmodified   [true]',
    '                     --static-maxage         [0]',
    '                     --static-redirect       [true]',
    '                     more info http://expressjs.com/4x/api.html#express.static',
    '-c   --config        Path to the configuration file',
    '-h   --help          Print this list and exit.',
    '',
    'more info https://github.com/victor-perez/vp-static-server'
  ].join('\n'));
  process.exit();
}
//fix the use of the string true and false
_.forEach(argv, function (value, key) {
    //false
    if (value === 'false') {
        argv[key] = false;
    }
    //true 
    if (value === 'true') {
        argv[key] = true;
    }
});
//load config file
if (config) {
    config = require(path.normalize(process.cwd() + path.sep + config));
}
//parse options 
if (!config && process.argv.slice(2).length) {
    config = {
        static: {},
    };
    //root
    if (def(argv.r, argv.root)) {
        config.root = first(argv.r, argv.root);
    }
    //host
    if (def(argv.a, argv.host)) {
        config.host = first(argv.a, argv.host);
    }
    //port
    if (def(argv.p, argv.port)) {
        config.port = first(argv.p, argv.port);
    }
    //open
    if (def(argv.o, argv.open)) {
        config.open = first(argv.o, argv.open);
    }
    //set own cert & key
    if (argv['https-cert'] && argv['https-key']) {
        config.https = {
            key: fs.readFileSync(path.normalize(argv['https-key'])),
            cert: fs.readFileSync(path.normalize(argv['https-cert']))
        };
    }
    //https ( easy )
    if (!config.https && def(argv.s, argv.https)) {
        config.https = true;
    }
    //static-dotfiles
    if (_.has(argv, 'static-dotfiles')) {
        config.static.dotfiles = argv['static-dotfiles'];
    }
    //static-etag
    if (_.has(argv, 'static-etag')) {
        config.static.etag = argv['static-etag'];
    }
    //static-index
    if (_.has(argv, 'static-index')) {
        config.static.index = argv['static-index'];
    }
    //static-lastmodified
    if (_.has(argv, 'static-lastmodified')) {
        config.static.lastModified = argv['static-lastmodified'];
    }
    //static-maxage
    if (_.has(argv, 'static-maxage')) {
        config.static.maxAge = argv['static-maxage'];
    }
    //static-redirect
    if (_.has(argv, 'static-redirect')) {
        config.static.redirect = argv['static-redirect'];
    }
}
//start server
server(config);